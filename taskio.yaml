AWSTemplateFormatVersion: "2010-09-09"
Description: "PRUEBAAAAA"

Parameters:
  EnvName:
    Type: String
    Default: dev

Resources:
  # Rol básico para la Lambda
  TaskioLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "TaskioLambdaRole-${EnvName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # Lambda para HealthCheck
  TaskioHealthCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "TaskioHealthCheckLambda-${EnvName}"
      Handler: "lambda_function.handler"
      Runtime: "python3.9"
      Role: !GetAtt TaskioLambdaRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              return {
                  "statusCode": 200,
                  "body": "OK, healthy!"
              }

  # Lambda para Jobs
  TaskioJobsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "TaskioJobsLambda-${EnvName}"
      Handler: "lambda_function.handler"
      Runtime: "python3.9"
      Role: !GetAtt TaskioLambdaRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              return {
                  "statusCode": 200,
                  "body": "Aquí va la lista de Jobs!"
              }

  # API Gateway
  TaskioApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "TaskioApi-${EnvName}"

  # Recurso /health
  TaskioHealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TaskioApiGateway
      ParentId: !GetAtt TaskioApiGateway.RootResourceId
      PathPart: "health"

  # Recurso /jobs
  TaskioJobsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TaskioApiGateway
      ParentId: !GetAtt TaskioApiGateway.RootResourceId
      PathPart: "jobs"

  # Método GET /health -> Lambda
  TaskioHealthGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TaskioApiGateway
      ResourceId: !Ref TaskioHealthResource
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TaskioHealthCheckLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: "200"
      MethodResponses:
        - StatusCode: "200"

  # Método GET /jobs -> Lambda
  TaskioJobsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TaskioApiGateway
      ResourceId: !Ref TaskioJobsResource
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TaskioJobsLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: "200"
      MethodResponses:
        - StatusCode: "200"

  # Permitir que API Gateway invoque las Lambdas
  PermissionTaskioHealthCheckApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TaskioHealthCheckLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TaskioApiGateway}/*/GET/health"

  PermissionTaskioJobsApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TaskioJobsLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TaskioApiGateway}/*/GET/jobs"

  # Deployment + Stage
  TaskioApiDeploymentDev:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - TaskioHealthGetMethod
      - TaskioJobsGetMethod
    Properties:
      RestApiId: !Ref TaskioApiGateway
      StageName: !Sub "${EnvName}"

Outputs:
  ApiUrl:
    Description: "URL base de la API"
    Value: !Sub "https://${TaskioApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvName}"
